const std = @import("std");

pub fn build(b: *std.Build) !void {
    //const target = b.resolveTargetQuery(.{ .cpu_arch = .wasm32, .os_tag = .freestanding });
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const geos_source = b.dependency("geos_source", .{});

    // Hardcoded version information from Version.txt
    const version_info = .{
        .geos_major = "3",
        .geos_minor = "15",
        .geos_patch = "0",
        .patch_word = "dev",
        .capi_current = 22,
        .capi_revision = 0,
        .capi_age = 21,
        .jts_port = "1.18.0",
    };

    // Calculate CAPI version components
    const capi_major = version_info.capi_current - version_info.capi_age;
    const capi_minor = version_info.capi_age;
    const capi_patch = version_info.capi_revision;

    // Build version strings
    const geos_version = if (version_info.patch_word.len > 0)
        try std.fmt.allocPrint(b.allocator, "{s}.{s}.{s}{s}", .{
            version_info.geos_major,
            version_info.geos_minor,
            version_info.geos_patch,
            version_info.patch_word,
        })
    else
        try std.fmt.allocPrint(b.allocator, "{s}.{s}.{s}", .{
            version_info.geos_major,
            version_info.geos_minor,
            version_info.geos_patch,
        });
    defer b.allocator.free(geos_version);

    const capi_version = try std.fmt.allocPrint(b.allocator, "{d}.{d}.{d}", .{ capi_major, capi_minor, capi_patch });
    defer b.allocator.free(capi_version);

    const capi_major_str = try std.fmt.allocPrint(b.allocator, "{d}", .{capi_major});
    defer b.allocator.free(capi_major_str);

    const capi_minor_str = try std.fmt.allocPrint(b.allocator, "{d}", .{capi_minor});
    defer b.allocator.free(capi_minor_str);

    const capi_patch_str = try std.fmt.allocPrint(b.allocator, "{d}", .{capi_patch});
    defer b.allocator.free(capi_patch_str);

    // Generate geos_c.h from template
    const geos_c_h_step = b.addConfigHeader(
        .{
            .style = .{ .cmake = geos_source.path("capi/geos_c.h.in") },
            .include_path = "geos_c.h",
        },
        .{
            .VERSION_MAJOR = version_info.geos_major,
            .VERSION_MINOR = version_info.geos_minor,
            .VERSION_PATCH = version_info.geos_patch,
            .VERSION = geos_version,
            .JTS_PORT = version_info.jts_port,
            .CAPI_VERSION_MAJOR = capi_major_str,
            .CAPI_VERSION_MINOR = capi_minor_str,
            .CAPI_VERSION_PATCH = capi_patch_str,
            .CAPI_VERSION = capi_version,
        },
    );

    const install_header_step = b.addInstallFile(
        geos_c_h_step.getOutputFile(),
        "include/geos_c.h",
    );
    b.getInstallStep().dependOn(&install_header_step.step);

    // Generate geos/version.h from template
    const version_h_step = b.addConfigHeader(
        .{
            .style = .{ .cmake = geos_source.path("include/geos/version.h.in") },
            .include_path = "geos/version.h",
        },
        .{
            .VERSION_MAJOR = version_info.geos_major,
            .VERSION_MINOR = version_info.geos_minor,
            .VERSION_PATCH = version_info.geos_patch,
            .VERSION = geos_version,
            .JTS_PORT = version_info.jts_port,
        },
    );

    // Build the GEOS C++ library
    const geos_lib = std.Build.Step.Compile.create(b, .{
        .name = "geos",
        .root_module = b.createModule(.{
            .target = target,
            .optimize = optimize,
        }),
        .kind = .lib,
        .linkage = .static,
    });

    // Add all C++ source files from src/
    const cpp_flags = &[_][]const u8{
        "-std=c++17",
        "-fno-sanitize=undefined",
        "-DUSE_UNSTABLE_GEOS_CPP_API",
    };

    const geos_cpp_files = [_][]const u8{
        "src/noding/FastNodingValidator.cpp",
        "src/noding/snap/SnappingNoder.cpp",
        "src/noding/snap/SnappingIntersectionAdder.cpp",
        "src/noding/snap/SnappingPointIndex.cpp",
        "src/noding/MCIndexNoder.cpp",
        "src/noding/OrientedCoordinateArray.cpp",
        "src/noding/NodingIntersectionFinder.cpp",
        "src/noding/SegmentNode.cpp",
        "src/noding/IntersectionAdder.cpp",
        "src/noding/NodedSegmentString.cpp",
        "src/noding/BoundaryChainNoder.cpp",
        "src/noding/SegmentNodeList.cpp",
        "src/noding/SegmentExtractingNoder.cpp",
        "src/noding/SegmentString.cpp",
        "src/noding/snapround/SnapRoundingIntersectionAdder.cpp",
        "src/noding/snapround/HotPixelIndex.cpp",
        "src/noding/snapround/SnapRoundingNoder.cpp",
        "src/noding/snapround/MCIndexPointSnapper.cpp",
        "src/noding/snapround/HotPixel.cpp",
        "src/noding/snapround/MCIndexSnapRounder.cpp",
        "src/noding/SegmentIntersectionDetector.cpp",
        "src/noding/Octant.cpp",
        "src/noding/BasicSegmentString.cpp",
        "src/noding/SegmentStringUtil.cpp",
        "src/noding/SimpleNoder.cpp",
        "src/noding/IteratedNoder.cpp",
        "src/noding/ValidatingNoder.cpp",
        "src/noding/IntersectionFinderAdder.cpp",
        "src/noding/MCIndexSegmentSetMutualIntersector.cpp",
        "src/noding/GeometryNoder.cpp",
        "src/noding/NodingValidator.cpp",
        "src/noding/FastSegmentSetIntersectionFinder.cpp",
        "src/noding/ScaledNoder.cpp",
        "src/math/DD.cpp",
        "src/algorithm/Centroid.cpp",
        "src/algorithm/BoundaryNodeRule.cpp",
        "src/algorithm/RayCrossingCounter.cpp",
        "src/algorithm/Orientation.cpp",
        "src/algorithm/hull/HullTriangulation.cpp",
        "src/algorithm/hull/OuterShellsExtracter.cpp",
        "src/algorithm/hull/ConcaveHull.cpp",
        "src/algorithm/hull/HullTri.cpp",
        "src/algorithm/hull/ConcaveHullOfPolygons.cpp",
        "src/algorithm/Area.cpp",
        "src/algorithm/NotRepresentableException.cpp",
        "src/algorithm/InteriorPointLine.cpp",
        "src/algorithm/locate/SimplePointInAreaLocator.cpp",
        "src/algorithm/locate/PointOnGeometryLocator.cpp",
        "src/algorithm/locate/IndexedPointInAreaLocator.cpp",
        "src/algorithm/distance/DiscreteHausdorffDistance.cpp",
        "src/algorithm/distance/DiscreteFrechetDistance.cpp",
        "src/algorithm/distance/DistanceToPoint.cpp",
        "src/algorithm/HCoordinate.cpp",
        "src/algorithm/LineIntersector.cpp",
        "src/algorithm/InteriorPointArea.cpp",
        "src/algorithm/RobustDeterminant.cpp",
        "src/algorithm/PointLocator.cpp",
        "src/algorithm/Distance.cpp",
        "src/algorithm/PointLocation.cpp",
        "src/algorithm/MinimumDiameter.cpp",
        "src/algorithm/MinimumAreaRectangle.cpp",
        "src/algorithm/PolygonNodeTopology.cpp",
        "src/algorithm/Length.cpp",
        "src/algorithm/Intersection.cpp",
        "src/algorithm/Rectangle.cpp",
        "src/algorithm/InteriorPointPoint.cpp",
        "src/algorithm/construct/MaximumInscribedCircle.cpp",
        "src/algorithm/construct/ExactMaxInscribedCircle.cpp",
        "src/algorithm/construct/LargestEmptyCircle.cpp",
        "src/algorithm/construct/IndexedPointInPolygonsLocator.cpp",
        "src/algorithm/construct/IndexedDistanceToPoint.cpp",
        "src/algorithm/ConvexHull.cpp",
        "src/algorithm/CircularArcs.cpp",
        "src/algorithm/CGAlgorithmsDD.cpp",
        "src/algorithm/MinimumBoundingCircle.cpp",
        "src/algorithm/Angle.cpp",
        "src/edgegraph/EdgeGraphBuilder.cpp",
        "src/edgegraph/HalfEdge.cpp",
        "src/edgegraph/MarkHalfEdge.cpp",
        "src/edgegraph/EdgeGraph.cpp",
        "src/geom/Triangle.cpp",
        "src/geom/CircularString.cpp",
        "src/geom/LineString.cpp",
        "src/geom/CompoundCurve.cpp",
        "src/geom/HeuristicOverlay.cpp",
        "src/geom/Coordinate.cpp",
        "src/geom/MultiCurve.cpp",
        "src/geom/LineSegment.cpp",
        "src/geom/Surface.cpp",
        "src/geom/LinearRing.cpp",
        "src/geom/MultiLineString.cpp",
        "src/geom/SimpleCurve.cpp",
        "src/geom/MultiPolygon.cpp",
        "src/geom/GeometryCollection.cpp",
        "src/geom/MultiPoint.cpp",
        "src/geom/Location.cpp",
        "src/geom/Envelope.cpp",
        "src/geom/GeometryComponentFilter.cpp",
        "src/geom/util/CoordinateOperation.cpp",
        "src/geom/util/Densifier.cpp",
        "src/geom/util/PolygonExtracter.cpp",
        "src/geom/util/GeometryEditor.cpp",
        "src/geom/util/GeometryFixer.cpp",
        "src/geom/util/SineStarFactory.cpp",
        "src/geom/util/ShortCircuitedGeometryVisitor.cpp",
        "src/geom/util/LinearComponentExtracter.cpp",
        "src/geom/util/PointExtracter.cpp",
        "src/geom/util/PolygonalExtracter.cpp",
        "src/geom/util/GeometryCombiner.cpp",
        "src/geom/util/ComponentCoordinateExtracter.cpp",
        "src/geom/util/GeometryTransformer.cpp",
        "src/geom/util/NoOpGeometryOperation.cpp",
        "src/geom/util/GeometryMapper.cpp",
        "src/geom/Point.cpp",
        "src/geom/Quadrant.cpp",
        "src/geom/MultiSurface.cpp",
        "src/geom/prep/PreparedPolygonContains.cpp",
        "src/geom/prep/PreparedLineStringNearestPoints.cpp",
        "src/geom/prep/PreparedLineStringDistance.cpp",
        "src/geom/prep/PreparedPoint.cpp",
        "src/geom/prep/PreparedPolygonIntersects.cpp",
        "src/geom/prep/BasicPreparedGeometry.cpp",
        "src/geom/prep/PreparedPolygonPredicate.cpp",
        "src/geom/prep/PreparedPolygonContainsProperly.cpp",
        "src/geom/prep/PreparedGeometryFactory.cpp",
        "src/geom/prep/PreparedPolygonDistance.cpp",
        "src/geom/prep/PreparedLineStringIntersects.cpp",
        "src/geom/prep/PreparedPolygon.cpp",
        "src/geom/prep/PreparedGeometry.cpp",
        "src/geom/prep/AbstractPreparedPolygonContains.cpp",
        "src/geom/prep/PreparedLineString.cpp",
        "src/geom/prep/PreparedPolygonCovers.cpp",
        "src/geom/Geometry.cpp",
        "src/geom/PrecisionModel.cpp",
        "src/geom/Curve.cpp",
        "src/geom/Dimension.cpp",
        "src/geom/CoordinateSequence.cpp",
        "src/geom/CurvePolygon.cpp",
        "src/geom/IntersectionMatrix.cpp",
        "src/geom/GeometryFactory.cpp",
        "src/geom/Position.cpp",
        "src/geom/Polygon.cpp",
        "src/coverage/CoverageCleaner.cpp",
        "src/coverage/CoverageValidator.cpp",
        "src/coverage/CoverageRingEdges.cpp",
        "src/coverage/CoverageUnion.cpp",
        "src/coverage/CoverageEdge.cpp",
        "src/coverage/CleanCoverage.cpp",
        "src/coverage/CoverageSimplifier.cpp",
        "src/coverage/CoveragePolygon.cpp",
        "src/coverage/CoverageGapFinder.cpp",
        "src/coverage/TPVWSimplifier.cpp",
        "src/coverage/CoveragePolygonValidator.cpp",
        "src/coverage/CoverageRing.cpp",
        "src/coverage/VertexRingCounter.cpp",
        "src/coverage/CoverageBoundarySegmentFinder.cpp",
        "src/coverage/Corner.cpp",
        "src/coverage/InvalidSegmentDetector.cpp",
        "src/operation/BoundaryOp.cpp",
        "src/operation/distance/DistanceOp.cpp",
        "src/operation/distance/ConnectedElementPointFilter.cpp",
        "src/operation/distance/FacetSequence.cpp",
        "src/operation/distance/GeometryLocation.cpp",
        "src/operation/distance/ConnectedElementLocationFilter.cpp",
        "src/operation/distance/IndexedFacetDistance.cpp",
        "src/operation/distance/FacetSequenceTreeBuilder.cpp",
        "src/operation/intersection/RectangleIntersectionBuilder.cpp",
        "src/operation/intersection/Rectangle.cpp",
        "src/operation/intersection/RectangleIntersection.cpp",
        "src/operation/GeometryGraphOperation.cpp",
        "src/operation/predicate/RectangleContains.cpp",
        "src/operation/predicate/RectangleIntersects.cpp",
        "src/operation/predicate/SegmentIntersectionTester.cpp",
        "src/operation/valid/RepeatedPointRemover.cpp",
        "src/operation/valid/MakeValid.cpp",
        "src/operation/valid/PolygonRingSelfNode.cpp",
        "src/operation/valid/PolygonTopologyAnalyzer.cpp",
        "src/operation/valid/RepeatedPointTester.cpp",
        "src/operation/valid/IsValidOp.cpp",
        "src/operation/valid/TopologyValidationError.cpp",
        "src/operation/valid/IndexedNestedPolygonTester.cpp",
        "src/operation/valid/PolygonIntersectionAnalyzer.cpp",
        "src/operation/valid/PolygonRing.cpp",
        "src/operation/valid/IndexedNestedHoleTester.cpp",
        "src/operation/valid/PolygonRingTouch.cpp",
        "src/operation/valid/IsSimpleOp.cpp",
        "src/operation/relateng/EdgeSetIntersector.cpp",
        "src/operation/relateng/RelatePredicate.cpp",
        "src/operation/relateng/BasicPredicate.cpp",
        "src/operation/relateng/RelateNG.cpp",
        "src/operation/relateng/LinearBoundary.cpp",
        "src/operation/relateng/EdgeSegmentOverlapAction.cpp",
        "src/operation/relateng/EdgeSegmentIntersector.cpp",
        "src/operation/relateng/IMPatternMatcher.cpp",
        "src/operation/relateng/DimensionLocation.cpp",
        "src/operation/relateng/AdjacentEdgeLocator.cpp",
        "src/operation/relateng/IMPredicate.cpp",
        "src/operation/relateng/TopologyComputer.cpp",
        "src/operation/relateng/LineStringExtracter.cpp",
        "src/operation/relateng/RelateNode.cpp",
        "src/operation/relateng/RelateEdge.cpp",
        "src/operation/relateng/RelateSegmentString.cpp",
        "src/operation/relateng/NodeSection.cpp",
        "src/operation/relateng/PolygonNodeConverter.cpp",
        "src/operation/relateng/NodeSections.cpp",
        "src/operation/relateng/RelatePointLocator.cpp",
        "src/operation/relateng/RelateGeometry.cpp",
        "src/operation/overlayng/RobustClipEnvelopeComputer.cpp",
        "src/operation/overlayng/OverlayEdgeRing.cpp",
        "src/operation/overlayng/OverlayLabel.cpp",
        "src/operation/overlayng/EdgeNodingBuilder.cpp",
        "src/operation/overlayng/UnaryUnionNG.cpp",
        "src/operation/overlayng/LineLimiter.cpp",
        "src/operation/overlayng/OverlayMixedPoints.cpp",
        "src/operation/overlayng/OverlayGraph.cpp",
        "src/operation/overlayng/OverlayLabeller.cpp",
        "src/operation/overlayng/Edge.cpp",
        "src/operation/overlayng/PrecisionReducer.cpp",
        "src/operation/overlayng/OverlayUtil.cpp",
        "src/operation/overlayng/PolygonBuilder.cpp",
        "src/operation/overlayng/LineBuilder.cpp",
        "src/operation/overlayng/PrecisionUtil.cpp",
        "src/operation/overlayng/InputGeometry.cpp",
        "src/operation/overlayng/CoverageUnion.cpp",
        "src/operation/overlayng/OverlayNGRobust.cpp",
        "src/operation/overlayng/OverlayPoints.cpp",
        "src/operation/overlayng/EdgeSourceInfo.cpp",
        "src/operation/overlayng/OverlayEdge.cpp",
        "src/operation/overlayng/IntersectionPointBuilder.cpp",
        "src/operation/overlayng/MaximalEdgeRing.cpp",
        "src/operation/overlayng/IndexedPointOnLineLocator.cpp",
        "src/operation/overlayng/EdgeMerger.cpp",
        "src/operation/overlayng/ElevationModel.cpp",
        "src/operation/overlayng/RingClipper.cpp",
        "src/operation/overlayng/EdgeKey.cpp",
        "src/operation/overlayng/OverlayNG.cpp",
        "src/operation/relate/RelateNode.cpp",
        "src/operation/relate/EdgeEndBuilder.cpp",
        "src/operation/relate/RelateOp.cpp",
        "src/operation/relate/RelateComputer.cpp",
        "src/operation/relate/RelateNodeFactory.cpp",
        "src/operation/relate/RelateNodeGraph.cpp",
        "src/operation/relate/EdgeEndBundle.cpp",
        "src/operation/relate/EdgeEndBundleStar.cpp",
        "src/operation/overlay/snap/GeometrySnapper.cpp",
        "src/operation/overlay/snap/LineStringSnapper.cpp",
        "src/operation/overlay/snap/SnapOverlayOp.cpp",
        "src/operation/overlay/validate/OffsetPointGenerator.cpp",
        "src/operation/overlay/validate/OverlayResultValidator.cpp",
        "src/operation/overlay/validate/FuzzyPointLocator.cpp",
        "src/operation/polygonize/Polygonizer.cpp",
        "src/operation/polygonize/EdgeRing.cpp",
        "src/operation/polygonize/BuildArea.cpp",
        "src/operation/polygonize/PolygonizeEdge.cpp",
        "src/operation/polygonize/PolygonizeDirectedEdge.cpp",
        "src/operation/polygonize/HoleAssigner.cpp",
        "src/operation/polygonize/PolygonizeGraph.cpp",
        "src/operation/union/CascadedPolygonUnion.cpp",
        "src/operation/union/UnaryUnionOp.cpp",
        "src/operation/union/OverlapUnion.cpp",
        "src/operation/union/CoverageUnion.cpp",
        "src/operation/union/PointGeometryUnion.cpp",
        "src/operation/union/UnionStrategy.cpp",
        "src/operation/cluster/UnionFind.cpp",
        "src/operation/cluster/GeometryFlattener.cpp",
        "src/operation/cluster/Clusters.cpp",
        "src/operation/cluster/AbstractClusterFinder.cpp",
        "src/operation/cluster/DBSCANClusterFinder.cpp",
        "src/operation/sharedpaths/SharedPathsOp.cpp",
        "src/operation/buffer/PolygonBuilder.cpp",
        "src/operation/buffer/RightmostEdgeFinder.cpp",
        "src/operation/buffer/MaximalEdgeRing.cpp",
        "src/operation/buffer/BufferParameters.cpp",
        "src/operation/buffer/MinimalEdgeRing.cpp",
        "src/operation/buffer/BufferBuilder.cpp",
        "src/operation/buffer/SegmentMCIndex.cpp",
        "src/operation/buffer/BufferNodeFactory.cpp",
        "src/operation/buffer/OffsetCurveBuilder.cpp",
        "src/operation/buffer/BufferSubgraph.cpp",
        "src/operation/buffer/OffsetCurveSection.cpp",
        "src/operation/buffer/BufferInputLineSimplifier.cpp",
        "src/operation/buffer/OffsetCurve.cpp",
        "src/operation/buffer/BufferCurveSetBuilder.cpp",
        "src/operation/buffer/BufferOp.cpp",
        "src/operation/buffer/SubgraphDepthLocater.cpp",
        "src/operation/buffer/OffsetSegmentGenerator.cpp",
        "src/operation/grid/FloodFill.cpp",
        "src/operation/grid/GridIntersection.cpp",
        "src/operation/grid/PerimeterDistance.cpp",
        "src/operation/grid/Traversal.cpp",
        "src/operation/grid/Grid.cpp",
        "src/operation/grid/TraversalAreas.cpp",
        "src/operation/grid/Cell.cpp",
        "src/operation/linemerge/LineSequencer.cpp",
        "src/operation/linemerge/LineMergeDirectedEdge.cpp",
        "src/operation/linemerge/LineMerger.cpp",
        "src/operation/linemerge/LineMergeEdge.cpp",
        "src/operation/linemerge/EdgeString.cpp",
        "src/operation/linemerge/LineMergeGraph.cpp",
        "src/util/Assert.cpp",
        "src/util/string.cpp",
        "src/util/math.cpp",
        "src/util/Interrupt.cpp",
        "src/util/GeometricShapeFactory.cpp",
        "src/util/Profiler.cpp",
        "src/geomgraph/NodeMap.cpp",
        "src/geomgraph/PlanarGraph.cpp",
        "src/geomgraph/DirectedEdge.cpp",
        "src/geomgraph/GeometryGraph.cpp",
        "src/geomgraph/TopologyLocation.cpp",
        "src/geomgraph/EdgeIntersectionList.cpp",
        "src/geomgraph/GraphComponent.cpp",
        "src/geomgraph/EdgeEndStar.cpp",
        "src/geomgraph/EdgeEnd.cpp",
        "src/geomgraph/DirectedEdgeStar.cpp",
        "src/geomgraph/Depth.cpp",
        "src/geomgraph/Node.cpp",
        "src/geomgraph/EdgeNodingValidator.cpp",
        "src/geomgraph/index/SegmentIntersector.cpp",
        "src/geomgraph/index/SimpleEdgeSetIntersector.cpp",
        "src/geomgraph/index/SimpleMCSweepLineIntersector.cpp",
        "src/geomgraph/index/SweepLineEvent.cpp",
        "src/geomgraph/index/SimpleSweepLineIntersector.cpp",
        "src/geomgraph/index/SweepLineSegment.cpp",
        "src/geomgraph/index/MonotoneChainIndexer.cpp",
        "src/geomgraph/index/MonotoneChainEdge.cpp",
        "src/geomgraph/Edge.cpp",
        "src/geomgraph/NodeFactory.cpp",
        "src/geomgraph/Label.cpp",
        "src/geomgraph/EdgeRing.cpp",
        "src/geomgraph/EdgeList.cpp",
        "src/planargraph/DirectedEdge.cpp",
        "src/planargraph/NodeMap.cpp",
        "src/planargraph/algorithm/ConnectedSubgraphFinder.cpp",
        "src/planargraph/DirectedEdgeStar.cpp",
        "src/planargraph/Subgraph.cpp",
        "src/planargraph/Edge.cpp",
        "src/planargraph/PlanarGraph.cpp",
        "src/planargraph/Node.cpp",
        "src/dissolve/DissolveEdgeGraph.cpp",
        "src/dissolve/DissolveHalfEdge.cpp",
        "src/dissolve/LineDissolver.cpp",
        "src/shape/fractal/HilbertCode.cpp",
        "src/shape/fractal/MortonCode.cpp",
        "src/shape/fractal/HilbertEncoder.cpp",
        "src/io/WKTFileReader.cpp",
        "src/io/WKTReader.cpp",
        "src/io/GeoJSON.cpp",
        "src/io/WKBStreamReader.cpp",
        "src/io/WKTWriter.cpp",
        "src/io/Writer.cpp",
        "src/io/ByteOrderValues.cpp",
        "src/io/CLocalizer.cpp",
        "src/io/GeoJSONReader.cpp",
        "src/io/StringTokenizer.cpp",
        "src/io/GeoJSONWriter.cpp",
        "src/io/WKBWriter.cpp",
        "src/io/ByteOrderDataInStream.cpp",
        "src/io/ParseException.cpp",
        "src/io/WKBReader.cpp",
        "src/io/WKTStreamReader.cpp",
        "src/simplify/ComponentJumpChecker.cpp",
        "src/simplify/LinkedRing.cpp",
        "src/simplify/LineSegmentIndex.cpp",
        "src/simplify/RingHullIndex.cpp",
        "src/simplify/TaggedLineString.cpp",
        "src/simplify/TaggedLineSegment.cpp",
        "src/simplify/DouglasPeuckerLineSimplifier.cpp",
        "src/simplify/LinkedLine.cpp",
        "src/simplify/DouglasPeuckerSimplifier.cpp",
        "src/simplify/TopologyPreservingSimplifier.cpp",
        "src/simplify/TaggedLineStringSimplifier.cpp",
        "src/simplify/RingHull.cpp",
        "src/simplify/PolygonHullSimplifier.cpp",
        "src/simplify/TaggedLinesSimplifier.cpp",
        "src/linearref/LinearGeometryBuilder.cpp",
        "src/linearref/LocationIndexOfLine.cpp",
        "src/linearref/LengthLocationMap.cpp",
        "src/linearref/LinearIterator.cpp",
        "src/linearref/LengthIndexedLine.cpp",
        "src/linearref/LengthIndexOfPoint.cpp",
        "src/linearref/ExtractLineByLocation.cpp",
        "src/linearref/LocationIndexOfPoint.cpp",
        "src/linearref/LinearLocation.cpp",
        "src/precision/CommonBitsOp.cpp",
        "src/precision/CommonBits.cpp",
        "src/precision/PrecisionReducerTransformer.cpp",
        "src/precision/CommonBitsRemover.cpp",
        "src/precision/SimpleGeometryPrecisionReducer.cpp",
        "src/precision/PointwisePrecisionReducerTransformer.cpp",
        "src/precision/EnhancedPrecisionOp.cpp",
        "src/precision/MinimumClearance.cpp",
        "src/precision/GeometryPrecisionReducer.cpp",
        "src/triangulate/DelaunayTriangulationBuilder.cpp",
        "src/triangulate/VoronoiDiagramBuilder.cpp",
        "src/triangulate/polygon/PolygonEarClipper.cpp",
        "src/triangulate/polygon/PolygonNoder.cpp",
        "src/triangulate/polygon/PolygonTriangulator.cpp",
        "src/triangulate/polygon/ConstrainedDelaunayTriangulator.cpp",
        "src/triangulate/polygon/TriDelaunayImprover.cpp",
        "src/triangulate/polygon/PolygonHoleJoiner.cpp",
        "src/triangulate/tri/TriEdge.cpp",
        "src/triangulate/tri/Tri.cpp",
        "src/triangulate/tri/TriangulationBuilder.cpp",
        "src/triangulate/quadedge/LocateFailureException.cpp",
        "src/triangulate/quadedge/LastFoundQuadEdgeLocator.cpp",
        "src/triangulate/quadedge/QuadEdgeSubdivision.cpp",
        "src/triangulate/quadedge/TrianglePredicate.cpp",
        "src/triangulate/quadedge/QuadEdge.cpp",
        "src/triangulate/quadedge/Vertex.cpp",
        "src/triangulate/IncrementalDelaunayTriangulator.cpp",
        "src/index/strtree/GeometryItemDistance.cpp",
        "src/index/strtree/EnvelopeUtil.cpp",
        "src/index/strtree/STRtree.cpp",
        "src/index/strtree/SimpleSTRnode.cpp",
        "src/index/strtree/SimpleSTRdistance.cpp",
        "src/index/strtree/Interval.cpp",
        "src/index/strtree/SimpleSTRtree.cpp",
        "src/index/strtree/SIRtree.cpp",
        "src/index/strtree/BoundablePair.cpp",
        "src/index/strtree/AbstractSTRtree.cpp",
        "src/index/kdtree/KdTree.cpp",
        "src/index/kdtree/KdNode.cpp",
        "src/index/chain/MonotoneChain.cpp",
        "src/index/chain/MonotoneChainSelectAction.cpp",
        "src/index/chain/MonotoneChainOverlapAction.cpp",
        "src/index/chain/MonotoneChainBuilder.cpp",
        "src/index/bintree/NodeBase.cpp",
        "src/index/bintree/Key.cpp",
        "src/index/bintree/Node.cpp",
        "src/index/bintree/Bintree.cpp",
        "src/index/bintree/Root.cpp",
        "src/index/bintree/Interval.cpp",
        "src/index/sweepline/SweepLineIndex.cpp",
        "src/index/sweepline/SweepLineEvent.cpp",
        "src/index/sweepline/SweepLineInterval.cpp",
        "src/index/VertexSequencePackedRtree.cpp",
        "src/index/quadtree/IntervalSize.cpp",
        "src/index/quadtree/NodeBase.cpp",
        "src/index/quadtree/Node.cpp",
        "src/index/quadtree/Root.cpp",
        "src/index/quadtree/Quadtree.cpp",
        "src/index/quadtree/Key.cpp",
        "src/index/intervalrtree/IntervalRTreeBranchNode.cpp",
        "src/index/intervalrtree/IntervalRTreeLeafNode.cpp",
        "src/index/intervalrtree/SortedPackedIntervalRTree.cpp",
    };

    for (geos_cpp_files) |file_path| {
        geos_lib.addCSourceFile(.{
            .file = geos_source.path(file_path),
            .flags = cpp_flags,
        });
    }

    // Add ryu source
    geos_lib.addCSourceFile(.{
        .file = geos_source.path("src/deps/ryu/d2s.c"),
        .flags = &[_][]const u8{"-std=c11"},
    });

    geos_lib.addIncludePath(geos_source.path("include"));
    geos_lib.addIncludePath(geos_source.path("src/deps"));
    geos_lib.addIncludePath(version_h_step.getOutputDir());
    geos_lib.linkLibCpp();
    b.installArtifact(geos_lib);

    // Build the GEOS C API library
    const geos_c_lib = std.Build.Step.Compile.create(b, .{
        .name = "geos_c",
        .root_module = b.createModule(.{
            .target = target,
            .optimize = optimize,
        }),
        .kind = .lib,
        .linkage = .static,
    });

    geos_c_lib.addCSourceFile(.{
        .file = geos_source.path("capi/geos_c.cpp"),
        .flags = cpp_flags,
    });
    geos_c_lib.addCSourceFile(.{
        .file = geos_source.path("capi/geos_ts_c.cpp"),
        .flags = cpp_flags,
    });

    geos_c_lib.addIncludePath(geos_source.path("include"));
    geos_c_lib.addIncludePath(b.path(".zig-cache"));
    geos_c_lib.addIncludePath(b.path(".zig-cache/include"));
    geos_c_lib.addIncludePath(geos_source.path("src/deps"));
    geos_c_lib.addIncludePath(geos_c_h_step.getOutputDir());
    geos_c_lib.addIncludePath(version_h_step.getOutputDir());
    geos_c_lib.linkLibrary(geos_lib);
    geos_c_lib.linkLibCpp();
    b.installArtifact(geos_c_lib);

    // Build the example app
    const exe = b.addExecutable(.{
        .name = "geos_example",
        .root_module = b.createModule(.{
            .root_source_file = b.path("main.zig"),
            .target = target,
            .optimize = optimize,
        }),
    });

    exe.addIncludePath(b.path(".zig-cache"));
    exe.addIncludePath(geos_c_h_step.getOutputDir());
    exe.addIncludePath(geos_source.path("include"));
    exe.linkLibrary(geos_c_lib);
    exe.linkLibrary(geos_lib);
    exe.linkLibCpp();

    b.installArtifact(exe);

    // Add run step
    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }

    const run_step = b.step("run", "Run the example app");
    run_step.dependOn(&run_cmd.step);
}
